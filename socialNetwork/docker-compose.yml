version: "3.9"

volumes:
  esdata:
    driver: local

networks:
  elastic-jaeger:
    driver: bridge
   
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - elastic-jaeger
    ports:
    - 17160:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    networks:
      - elastic-jaeger
    ports:
      - 16170:8080
    command:
      - "--allow_dynamic_housekeeping=false"
      - "--housekeeping_interval=1s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl"
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - redis

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - elastic-jaeger
    ports:
    - 6379:6379

  social-graph-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: social-graph-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10000:9090
    depends_on:
      jaeger-agent:
        condition: service_started
      social-graph-mongodb:
        condition: service_started
    deploy:
      replicas: 1
    restart: always
    entrypoint: SocialGraphService
    volumes:
      - ./config:/social-network-microservices/config

  social-graph-mongodb:
    image: mongo:4.4.6
    hostname: social-graph-mongodb
    networks:
      - elastic-jaeger
    # ports:
    #   - 27018:27017
    deploy:
      replicas: 1
    restart: always

  social-graph-redis:
    image: redis
    hostname: social-graph-redis
    networks:
      - elastic-jaeger
    # ports:
    #   - 6380:6379
    deploy:
      replicas: 1
    restart: always

  home-timeline-redis:
    image: redis
    hostname: home-timeline-redis
    networks:
      - elastic-jaeger
    # ports:
    #   - 6381:6379
    deploy:
      replicas: 1
    restart: always

  compose-post-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: compose-post-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10001:9090
    deploy:
      replicas: 1
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
    entrypoint: ComposePostService
    volumes:
      - ./config:/social-network-microservices/config

  post-storage-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: post-storage-service
    networks:
      - elastic-jaeger
    #ports:
    #  - 10002:9090
    cap_add:
      - NET_ADMIN
    deploy:
      replicas: 1
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
      post-storage-mongodb:
        condition: service_started
    entrypoint: PostStorageService
    volumes:
      - ./config:/social-network-microservices/config

  post-storage-memcached:
    image: memcached
    hostname: post-storage-memcached
    networks:
      - elastic-jaeger
    #    ports:
    #      - 11212:11211
    deploy:
      replicas: 1
    restart: always

  post-storage-mongodb:
    image: mongo:4.4.6
    hostname: post-storage-mongodb
    networks:
      - elastic-jaeger
    #    ports:
    #      - 27019:27017
    deploy:
      replicas: 1
    restart: always

  user-timeline-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: user-timeline-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10003:9090
    deploy:
      replicas: 1
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
      user-timeline-mongodb:
        condition: service_started
    entrypoint: UserTimelineService
    volumes:
      - ./config:/social-network-microservices/config

  user-timeline-redis:
    image: redis
    hostname: user-timeline-redis
    networks:
      - elastic-jaeger
    #    ports:
    #      - 6383:6379
    deploy:
      replicas: 1
    restart: always

  user-timeline-mongodb:
    image: mongo:4.4.6
    hostname: user-timeline-mongodb
    networks:
      - elastic-jaeger
    #    ports:
    #      - 27020:27017
    deploy:
      replicas: 1
    restart: always

  url-shorten-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: url-shorten-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10004:9090
    deploy:
      replicas: 1
    restart: always
    entrypoint: UrlShortenService
    depends_on:
      jaeger-agent:
        condition: service_started
      url-shorten-mongodb:
        condition: service_started
    volumes:
      - ./config:/social-network-microservices/config

  url-shorten-memcached:
    image: memcached
    hostname: url-shorten-memcached
    networks:
      - elastic-jaeger
    #    ports:
    #      - 11213:11211
    deploy:
      replicas: 1
    restart: always

  url-shorten-mongodb:
    image: mongo:4.4.6
    hostname: url-shorten-mongodb
    networks:
      - elastic-jaeger
    #    ports:
    #      - 27021:27017
    deploy:
      replicas: 1
    restart: always

  user-service:
    image: gilow/social-network-microservices:latest
    hostname: user-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10005:9090
    deploy:
      replicas: 1
    restart: always
    cap_add: 
      - NET_ADMIN
    depends_on:
      jaeger-agent:
        condition: service_started
      user-mongodb:
        condition: service_started
    entrypoint: UserService
    volumes:
      - ./config:/social-network-microservices/config

  user-memcached:
    image: memcached
    hostname: user-memcached
    networks:
      - elastic-jaeger
    #    ports:
    #      - 11214:11211
    deploy:
      replicas: 1
    restart: always

  user-mongodb:
    image: mongo:4.4.6
    hostname: user-mongodb
    networks:
      - elastic-jaeger
    # ports:
    #   - 27023:27017
    deploy:
      replicas: 1
    restart: always

  media-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: media-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10006:9090
    depends_on:
      jaeger-agent:
        condition: service_started
      media-mongodb:
        condition: service_started
    deploy:
      replicas: 1
    restart: always
    entrypoint: MediaService
    volumes:
      - ./config:/social-network-microservices/config

  media-memcached:
    image: memcached
    hostname: media-memcached
    networks:
      - elastic-jaeger
    #    ports:
    #      - 11215:11211
    deploy:
      replicas: 1
    restart: always

  media-mongodb:
    image: mongo:4.4.6
    hostname: media-mongodb
    networks:
      - elastic-jaeger
    #    ports:
    #      - 27024:27017
    deploy:
      replicas: 1
    restart: always

  text-service:
    image: deathstarbench/social-network-microservices:latest
    hostname: text-service
    networks:
      - elastic-jaeger
    #    ports:
    #      - 10007:9090
    deploy:
      replicas: 1
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
    entrypoint: TextService
    volumes:
      - ./config:/social-network-microservices/config

  unique-id-service:
    image: deathstarbench/social-network-microservices:latest
    networks:
      - elastic-jaeger
    hostname: unique-id-service
    #    ports:
    #      - 10008:9090
    deploy:
      replicas: 1
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
    entrypoint: UniqueIdService
    volumes:
      - ./config:/social-network-microservices/config

  user-mention-service:
    image: deathstarbench/social-network-microservices:latest
    networks:
      - elastic-jaeger
    hostname: user-mention-service
    cap_add:
      - NET_ADMIN
    #    ports:
    #      - 10009:9090
    depends_on:
      jaeger-agent:
        condition: service_started
    deploy:
      replicas: 1
    restart: always
    entrypoint: UserMentionService
    volumes:
      - ./config:/social-network-microservices/config

  home-timeline-service:
    image: deathstarbench/social-network-microservices:latest
    networks:
      - elastic-jaeger
    hostname: home-timeline-service
    #    ports:
    #      - 10010:9090
    depends_on:
      jaeger-agent:
        condition: service_started
    deploy:
      replicas: 1
    restart: always
    entrypoint: HomeTimelineService
    volumes:
      - ./config:/social-network-microservices/config

  nginx-thrift:
    image: yg397/openresty-thrift:xenial
    networks:
      - elastic-jaeger
    hostname: nginx-thrift
    ports:
      - 8080:8080
    depends_on:
      jaeger-agent:
        condition: service_started
    deploy:
      replicas: 1
    restart: always
    volumes:
      - ./nginx-web-server/lua-scripts:/usr/local/openresty/nginx/lua-scripts
      - ./nginx-web-server/pages:/usr/local/openresty/nginx/pages
      - ./nginx-web-server/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./nginx-web-server/jaeger-config.json:/usr/local/openresty/nginx/jaeger-config.json
      - ./gen-lua:/gen-lua
      - ./docker/openresty-thrift/lua-thrift:/usr/local/openresty/lualib/thrift

  media-frontend:
    image: yg397/media-frontend:xenial
    networks:
      - elastic-jaeger
    hostname: media-frontend
    ports:
      - 8081:8080
    restart: always
    depends_on:
      jaeger-agent:
        condition: service_started
    deploy:
      replicas: 1
    volumes:
      - ./media-frontend/lua-scripts:/usr/local/openresty/nginx/lua-scripts
      - ./media-frontend/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    networks:
      - elastic-jaeger
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
    networks:
      - elastic-jaeger
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--log-level=error"
    ]
    depends_on:
      - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    networks:
      - elastic-jaeger
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    networks:
      - elastic-jaeger
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    depends_on:
      - jaeger-agent

      
      

